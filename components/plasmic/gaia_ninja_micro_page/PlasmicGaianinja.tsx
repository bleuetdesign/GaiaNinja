// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bU6Lhxx7TyWwgk34R1vqsd
// Component: s2oukTdkeXRJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Footer from "../../Footer"; // plasmic-import: R8j6CGTpgAOl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bU6Lhxx7TyWwgk34R1vqsd/projectcss
import sty from "./PlasmicGaianinja.module.css"; // plasmic-import: s2oukTdkeXRJ/css

import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: L0AcJjMMmeRo/icon

createPlasmicElementProxy;

export type PlasmicGaianinja__VariantMembers = {};
export type PlasmicGaianinja__VariantsArgs = {};
type VariantPropType = keyof PlasmicGaianinja__VariantsArgs;
export const PlasmicGaianinja__VariantProps = new Array<VariantPropType>();

export type PlasmicGaianinja__ArgsType = {};
type ArgPropType = keyof PlasmicGaianinja__ArgsType;
export const PlasmicGaianinja__ArgProps = new Array<ArgPropType>();

export type PlasmicGaianinja__OverridesType = {
  root?: Flex__<"div">;
  intro?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  mainTextContainer?: Flex__<"div">;
  h1?: Flex__<"h1">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultGaianinjaProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGaianinja__RenderFunc(props: {
  variants: PlasmicGaianinja__VariantsArgs;
  args: PlasmicGaianinja__ArgsType;
  overrides: PlasmicGaianinja__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicGaianinja.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicGaianinja.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicGaianinja.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicGaianinja.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicGaianinja.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicGaianinja.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"section"}
            data-plasmic-name={"intro"}
            data-plasmic-override={overrides.intro}
            hasGap={true}
            className={classNames(projectcss.all, sty.intro)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              onLoadStart={async event => {
                const $steps = {};

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }
              }}
              src={{
                src: "/plasmic/gaia_ninja_micro_page/images/logoGaianinjaCarrepng.png",
                fullWidth: 585,
                fullHeight: 585,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                data-plasmic-name={"mainTextContainer"}
                data-plasmic-override={overrides.mainTextContainer}
                className={classNames(projectcss.all, sty.mainTextContainer)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Bonjour! \ud83d\udc4b"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lVdTu
                  )}
                >
                  {"Tu cherchais le site de Ga\u00efaNinja?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kRdwo
                  )}
                >
                  {
                    "Tu devrais \u00eatre redirig\u00e9 dans les prochaines secondes..."
                  }
                </div>
              </div>
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={"https://gaianinja.webflow.io"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eZo5F
                  )}
                >
                  {"Tu ne veux pas attendre? Clique ici"}
                </div>
                <RightArrowIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </PlasmicLink__>
            </div>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "intro",
    "img",
    "freeBox",
    "mainTextContainer",
    "h1",
    "link",
    "svg",
    "footer"
  ],
  intro: ["intro", "img", "freeBox", "mainTextContainer", "h1", "link", "svg"],
  img: ["img"],
  freeBox: ["freeBox", "mainTextContainer", "h1", "link", "svg"],
  mainTextContainer: ["mainTextContainer", "h1"],
  h1: ["h1"],
  link: ["link", "svg"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  intro: "section";
  img: typeof PlasmicImg__;
  freeBox: "div";
  mainTextContainer: "div";
  h1: "h1";
  link: "a";
  svg: "svg";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGaianinja__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGaianinja__VariantsArgs;
    args?: PlasmicGaianinja__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGaianinja__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGaianinja__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGaianinja__ArgProps,
          internalVariantPropNames: PlasmicGaianinja__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGaianinja__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGaianinja";
  } else {
    func.displayName = `PlasmicGaianinja.${nodeName}`;
  }
  return func;
}

export const PlasmicGaianinja = Object.assign(
  // Top-level PlasmicGaianinja renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    intro: makeNodeComponent("intro"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    mainTextContainer: makeNodeComponent("mainTextContainer"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicGaianinja
    internalVariantProps: PlasmicGaianinja__VariantProps,
    internalArgProps: PlasmicGaianinja__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Gaianinja",
      description:
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat. Aenean faucibus nibh et justo cursus id rutrum lorem imperdiet. Nunc ut sem vitae risus tristique posuere.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGaianinja;
/* prettier-ignore-end */
